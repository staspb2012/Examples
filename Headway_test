-- Порахувати Gross Revenue когортно. Якщо юзер 01/01 взяв тріал і ми отримали з нього гроші на 8-ий день, то цю виручку слід зарахувати в 01/01.
SELECT DATE_TRUNC('month', first_date) AS cohorts_month,
       subscription_name,
       COUNT(DISTINCT subscriber_id) AS total_subscribers,
       SUM(gross_revenue) AS total_gross_revenue
FROM (
      SELECT subscriber_id,
             subscription_name,
             DATE_TRUNC('month', MIN(event_date)) AS first_date,
             SUM(CASE WHEN customer_price = 0 THEN 0 ELSE customer_price END) AS gross_revenue
      FROM transactions
      WHERE refund = false
      GROUP BY 1,2
     ) AS t1
GROUP BY 1,2
ORDER BY 1,2

-- Порахувати, на який день в середньому юзер робить refund.
SELECT AVG(DATE_PART('day', mmax::timestamp - mmin::timestamp)) as avg
FROM (SELECT  MAX(event_date) OVER (PARTITION BY subscriber_id) as mmax, MIN(event_date) filter (WHERE refund = TRUE) OVER (PARTITION BY subscriber_id) as mmin
      FROM transactions
      WHERE subscriber_id in(SELECT subscriber_id FROM transactions WHERE refund = TRUE)) as cancel_user

-- Порахувати по місячних тарифах конверсії в 2, 3, 4, 5 і 6-ту оплату. Брати місячну когорту. Тобто нам важливо знати, як люди, що вперше купили підписку, наприклад, в жовтні, потім далі оплачували наступні місяці.
WITH monthly_cohorts AS (
  SELECT DATE_TRUNC('month', MIN(event_date)) as cohort_month, 
         subscriber_id
  FROM transactions
  WHERE subscription_name LIKE '%monthly%'
  GROUP BY 2
), 
cohort_payments AS (
  SELECT subscriber_id,
         DATE_TRUNC('month', event_date) as cohort_month,
         COUNT(*) as num_payments
  FROM transactions
  WHERE subscription_name LIKE '%monthly%'
  GROUP BY 1,2
)
SELECT DATE_TRUNC('month', monthly_cohorts.cohort_month) as cohort_month, 
  	   COUNT(DISTINCT monthly_cohorts.subscriber_id) as num_customers,
       SUM(CASE WHEN cohort_payments.num_payments >= 2 THEN 1 ELSE 0 END) / COUNT(DISTINCT monthly_cohorts.subscriber_id) as conversion_to_2nd_payment,
       SUM(CASE WHEN cohort_payments.num_payments >= 3 THEN 1 ELSE 0 END) / COUNT(DISTINCT monthly_cohorts.subscriber_id) as conversion_to_3rd_payment,
       SUM(CASE WHEN cohort_payments.num_payments >= 4 THEN 1 ELSE 0 END) / COUNT(DISTINCT monthly_cohorts.subscriber_id) as conversion_to_4th_payment,
       SUM(CASE WHEN cohort_payments.num_payments >= 5 THEN 1 ELSE 0 END) / COUNT(DISTINCT monthly_cohorts.subscriber_id) as conversion_to_5th_payment,
       SUM(CASE WHEN cohort_payments.num_payments >= 6 THEN 1 ELSE 0 END) / COUNT(DISTINCT monthly_cohorts.subscriber_id) as conversion_to_6th_payment
FROM monthly_cohorts
LEFT JOIN cohort_payments ON
           monthly_cohorts.subscriber_id = cohort_payments.subscriber_id
AND DATE_TRUNC('month', monthly_cohorts.cohort_month) = DATE_TRUNC('month', cohort_payments.cohort_month)
GROUP BY 1
ORDER BY 1 ASC
